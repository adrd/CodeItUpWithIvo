@model ContestResultsViewModel

@using OJS.Web.Areas.Contests.Controllers
@using OJS.Web.Areas.Contests.ViewModels.Results
@using OJS.Web.Areas.Users.Controllers
@using OJS.Workers.Common.Models

@using Resource = Resources.Areas.Contests.Views.ResultsFull

@{
    const string ResultsContainerId = "full-results-container";
    const string LoadingMaskContainerId = "full-results-loading-mask-container";
    const string OnPageChangedEventHandlerName = "OnPageChanged";
    var isOfficialStr = Model.IsCompete ? CompeteController.CompeteActionName : CompeteController.PracticeActionName;
    var isOfficial = Model.IsCompete;
    var results = Model.PagedResults;
}

<div class="loading-mask-container" id="@ResultsContainerId">
    @if (results.PageCount > 1)
    {
        @Html.PagedListPager(
            results,
            page => Url.Action<ResultsController>(
                c => c.FullPartial(Model.Id,isOfficial,page,results.PageSize)),
            PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new AjaxOptions
            {
                HttpMethod = "GET",
                UpdateTargetId = ResultsContainerId,
                LoadingElementId = LoadingMaskContainerId,
                OnSuccess = OnPageChangedEventHandlerName
            }))
    }

    @if (results.Count > 0)
    {
        <table class="table table-striped">
            <tr>
                <th>№</th>
                <th>@Resource.User</th>
                <th>@Resource.UserFullName</th>
                @{
                    var problemNumber = 0;
                }
                @foreach (var problem in Model.Problems)
                {
                    <th><a href="/Contests/@isOfficialStr/Index/@Model.Id#@problemNumber">@problem.Name</a></th>
                    problemNumber++;
                }

                <th>@Resource.Total</th>
            </tr>

            @for (var i = 0; i < results.Count; i++)
            {
                var participant = results[i];
                <tr>
                    <td><strong>@((results.PageNumber - 1) * results.PageSize + i + 1).</strong></td>
                    <th><a href="@(Url.Action<ProfileController>(c => c.Index(participant.ParticipantUsername)))">@participant.ParticipantUsername</a></th>
                    <td>@participant.ParticipantFullName</td>
                    @foreach (var problem in Model.Problems)
                    {
                        var problemResult = participant.ProblemResults.FirstOrDefault(pr => pr.ProblemId == problem.Id);
                        <td style="white-space: nowrap">
                        @if (problemResult != null)
                        {
                            if (problemResult.BestSubmission.Id.HasValue)
                            {
                                var submissionHref = Url.Action<SubmissionsController>(c => c.Details(problemResult.BestSubmission.Id ?? default(int)));

                                <strong>
                                    <a href="@submissionHref">@problemResult.BestSubmission.Points / @problemResult.MaximumPoints</a>
                                </strong>
                            }
                            else
                            {
                                <strong>@problemResult.BestSubmission.Points / @problemResult.MaximumPoints</strong>
                            }

                            <span>@problemResult.BestSubmission.SubmissionType</span>
                            <br />

                            if (!problemResult.BestSubmission.Id.HasValue)
                            {
                                <span>@Resource.Submission_deleted</span>
                            }
                            else if (!problemResult.BestSubmission.IsCompiledSuccessfully)
                            {
                                <span>@Resource.Compilation_failed</span>
                            }

                            foreach (var testRun in problemResult.BestSubmission.TestRuns)
                            {
                                var style = testRun.IsZeroTest ? "-ms-opacity: 0.3; opacity: 0.3" : string.Empty;
                                switch (testRun.ResultType)
                                {
                                    case TestRunResultType.CorrectAnswer:<span style="@style" class="glyphicon glyphicon-ok text-success" title=@Resource.Answer_correct></span>break;
                                    case TestRunResultType.WrongAnswer:<span style="@style" class="glyphicon glyphicon-remove text-danger" title=@Resource.Answer_incorrect></span>break;
                                    case TestRunResultType.TimeLimit:<span style="@style" class="glyphicon glyphicon-time text-danger" title=@Resource.Time_limit></span>break;
                                    case TestRunResultType.MemoryLimit:<span style="@style" class="glyphicon glyphicon-hdd text-danger" title=@Resource.Memory_limit></span>break;
                                    case TestRunResultType.RunTimeError:<span style="@style" class="glyphicon glyphicon-asterisk text-danger" title=@Resource.Runtime_error></span>break;
                                }
                            }
                        }
                        else
                        {
                            <span>@Resource.No_solution</span>
                        }

                        </td>
                    }

                    <td>@participant.Total</td>
                </tr>
            }

        </table>
    }
    else
    {
        <h2>@Resource.NoMoreResults</h2>
    }

    @if (results.PageCount > 1)
    {
        @Html.PagedListPager(
            results,
            page => Url.Action<ResultsController>(
                c => c.FullPartial(Model.Id, isOfficial,page, results.PageSize)),
            PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new AjaxOptions
            {
                HttpMethod = "GET",
                UpdateTargetId = ResultsContainerId,
                LoadingElementId = LoadingMaskContainerId,
                OnSuccess = OnPageChangedEventHandlerName
            }))
    }
    
    @Html.Partial("_LoadingMask", LoadingMaskContainerId)
</div>